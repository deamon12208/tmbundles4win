<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>
IS_HELPSERVER=$(cat "$TM_BUNDLE_SUPPORT"/isHelpserver)
PORT=0

if [ "$IS_HELPSERVER" == "TRUE" ]; then
	## Find or start a Help Server 
	# Check if Rdaemon runs, if so use that http help server
	RD=$(echo -n "$TM_SCOPE" | grep -c -F 'source.rd.console')
	RDOFF=$(echo -n "$TM_SCOPE" | grep -c -F 'source.r')
	[[ "${TM_CURRENT_LINE:0:1}" == "+" ]] &amp;&amp; RD="0"
	if [ $RD -gt 0 -o $RDOFF -gt 0 ]; then
		#get R's PID
		RPID=$(ps aw | grep '[0-9] /Lib.*TMRdaemon' | awk '{print $1;}' )
		#check whether Rdaemon runs
		if [ ! -z $RPID ]; then
			RDHOME="$HOME/Library/Application Support/Rdaemon"
			if [ "$TM_RdaemonRAMDRIVE" == "1" ]; then
				RDRAMDISK="/tmp/TMRramdisk1"
			else
				RDRAMDISK="$RDHOME"
			fi
			[[ -e "$RDRAMDISK"/r_tmp ]] &amp;&amp; rm "$RDRAMDISK"/r_tmp
			TASK="@|sink('$RDRAMDISK/r_tmp')"
			echo "$TASK" &gt; "$RDHOME"/r_in
			TASK="@|ifelse(!tools:::httpdPort,tools::startDynamicHelp(T),tools:::httpdPort)"
			echo "$TASK" &gt; "$RDHOME"/r_in
			TASK="@|sink(file=NULL)"
			echo "$TASK" &gt; "$RDHOME"/r_in
			while [ 1 ]
			do
				RES=$(tail -c 2 "$RDRAMDISK"/r_out)
				[[ "$RES" == "&gt; " ]] &amp;&amp; break
				[[ "$RES" == ": " ]] &amp;&amp; break
				[[ "$RES" == "+ " ]] &amp;&amp; break
				sleep 0.02
			done
			PORT=$(cat "$RDRAMDISK"/r_tmp | tail -n 1 | sed 's/.* //;')
			HELPPIPE_IN="$RDHOME/r_in"
			HELPPIPE_OUT="$RDRAMDISK/r_tmp"
		fi
	fi
	# If no Rdaemon runs start a dummy helper daemon
	if [ $RDOFF -gt 0 ]; then
		RPID=$(ps aw | grep '[0-9] /Lib.*TMRHelperDaemon' | awk '{print $1;}' )
		#check whether dummy daemon runs if not start it
		if [ -z $RPID ]; then
			WDIR="$TM_BUNDLE_SUPPORT"/bin
			cd "$WDIR"
			if [ ! -e /tmp/r_helper_dummy ]; then
				mkfifo /tmp/r_helper_dummy
			else
				if [ ! -p /tmp/r_helper_dummy ]; then
					rm /tmp/r_helper_dummy
					mkfifo /tmp/r_helper_dummy
				fi
			fi
			ruby Rhelperbuilder.rb &amp;&gt; /dev/null &amp;
			### wait for Rhelper
			#safety counter
			SAFECNT=0
			while [ ! -f /tmp/r_helper_dummy_out ]
			do
				SAFECNT=$(($SAFECNT+1))
				if [ $SAFECNT -gt 50000 ]; then
					echo -en "Start failed! No response from R Helper server!"
					exit 206
				fi
				sleep 0.01
			done

			#wait for Rdaemon's output is ready
			SAFECNT=0
			while [ 1 ]
			do
				ST=$(tail -n 1 /tmp/r_helper_dummy_out )
				[[ "$ST" == "&gt; " ]] &amp;&amp; break
				SAFECNT=$(($SAFECNT+1))
				if [ $SAFECNT -gt 50000 ]; then
					echo -en "Start failed! No response from R Helper server!"
					exit 206
				fi
				sleep 0.05
			done
		fi
		echo "ifelse(!tools:::httpdPort,tools::startDynamicHelp(T),tools:::httpdPort)" &gt; /tmp/r_helper_dummy
		while [ 1 ]
		do
			RES=$(tail -c 2 /tmp/r_helper_dummy_out)
			[[ "$RES" == "&gt; " ]] &amp;&amp; break
			[[ "$RES" == ": " ]] &amp;&amp; break
			[[ "$RES" == "+ " ]] &amp;&amp; break
			sleep 0.02
		done
		PORT=$(cat /tmp/r_helper_dummy_out | tail -n 2 | head -n 1 | sed 's/.* //;')
		HELPPIPE_IN="/tmp/r_helper_dummy"
		HELPPIPE_OUT="/tmp/r_helper_dummy_out"
	fi
	if [ "$PORT" == "0" -o -z "$PORT" ]; then
		echo -en "No Help Server found."
		exit_show_tool_tip
	fi
	echo "$PORT" &gt; "$TM_BUNDLE_SUPPORT"/httpPort
	echo "&lt;base href='http://127.0.0.1:$PORT/doc/html/index.html'&gt;"
	curl -sS "http://127.0.0.1:$PORT/doc/html/index.html"

else

	RHOME=${R_HOME:=/Library/Frameworks/R.framework/Versions/Current/Resources}

	echo "&lt;base href='tm-file://${RHOME// /%20}/doc/html/index.html'&gt;"
	cat "${RHOME// /%20}"/doc/html/index.html

fi</string>
	<key>input</key>
	<string>none</string>
	<key>name</key>
	<string>Show R Documentation</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>source.r</string>
	<key>uuid</key>
	<string>F6F4215A-5543-42B3-8EBD-C8C7C9F190C9</string>
</dict>
</plist>
