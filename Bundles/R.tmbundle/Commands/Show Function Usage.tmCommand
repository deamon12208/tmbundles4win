<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>TEXT=$(cat)

export WORD=$(ruby -- &lt;&lt;-SCR1
print ENV['TM_CURRENT_LINE'][0...ENV['TM_LINE_INDEX'].to_i].gsub!(/ *$/, "").match(/[\w.]*$/).to_s
SCR1
)


if [ -z "$TM_SELECTED_TEXT" ]; then
	export WORD=$(ruby -- &lt;&lt;-SCR1 
		require File.join(ENV["TM_SUPPORT_PATH"], "lib/current_word.rb")
		word = Word.current_word('\w\.')
		word.gsub!(/^[\d\.\-]+$/,"")
		print word
	SCR1
	) 
	if [ -z "$WORD" ]; then
		#look for nested commands
		export WORD=$(perl -e '
		$line=$ENV{"TM_CURRENT_LINE"};$col=$ENV{"TM_LINE_INDEX"};
		$line=substr($line,0,$col);
		$line=~s/ //g;
		@arr=split(//,$line);$c=0;
		for($i=$#arr;$i&gt;-1;$i--){$c-- if($arr[$i] eq ")");$c++ if($arr[$i] eq "(");last if $c&gt;0;}
		if($i==-1) {
			print "";
		} else {
			substr($line,0,$i)=~m/([\w\.]+)$/;
			print $1 if defined($1);
		}
		')
	fi
else
	#take the selected text
	export WORD=$(echo -en "$TM_SELECTED_TEXT" | perl -e '$_=&lt;&gt;;chomp;s/^[\t ]*//;s/([\w\.]+)[ \(\{].*/$1/g;print')
fi


#check whether WORD is defined otherwise quit
[[ -z "$WORD" ]] &amp;&amp; exit 200

RhelperAnswer="/tmp/textmate_Rhelper_out"

# Rdaemon
RPID=$(ps aw | grep '[0-9] /Lib.*TMRdaemon' | awk '{print $1;}' )
RD=$(echo -n "$TM_SCOPE" | grep -c -F 'source.rd.console')
if [ ! -z "$RPID" -a "$RD" -gt 0 ]; then
	RDHOME="$HOME/Library/Application Support/Rdaemon"
	if [ "$TM_RdaemonRAMDRIVE" == "1" ]; then
		RDRAMDISK="/tmp/TMRramdisk1"
	else
		RDRAMDISK="$RDHOME"
	fi
	[[ -e "$RDRAMDISK"/r_tmp ]] &amp;&amp; rm "$RDRAMDISK"/r_tmp

	# execute "args()" in Rdaemon
	TASK="@|sink('$RDRAMDISK/r_tmp')"
	echo "$TASK" &gt; "$RDHOME"/r_in
	TASK="@|args($WORD)"
	echo "$TASK" &gt; "$RDHOME"/r_in
	TASK="@|sink(file=NULL)"
	echo "$TASK" &gt; "$RDHOME"/r_in
	while [ 1 ]
	do
		RES=$(tail -c 2 "$RDRAMDISK"/r_out)
		[[ "$RES" == "&gt; " ]] &amp;&amp; break
		[[ "$RES" == ": " ]] &amp;&amp; break
		[[ "$RES" == "+ " ]] &amp;&amp; break
		sleep 0.02
	done
	RES=$(cat "$RDRAMDISK"/r_tmp | sed 's/NULL$//;')
	[[ "$RES" == "NULL" ]] &amp;&amp; RES=""
	# "args()" did find something
	if [ ! -z "$RES" ]; then
		echo -en "$WORD${RES:9}" | perl -pe 's/\n/ /g;s/ {2,}/ /g' | fmt | perl -e 'undef($/);$a=&lt;&gt;;$a=~s/\n/\n\t/g;$a=~s/\n\t$//;print $a'
		"$TM_BUNDLE_SUPPORT"/bin/askRhelperDaemon.sh "@getPackageFor('$WORD')"
		LIB=$(cat "$RhelperAnswer")
		if [ -z "$LIB" ]; then
			LIB="local"
		fi
		echo -en "\n•• library: $LIB"
		exit 206
	# "args()" didn't find anything ergo library isn't yet loaded
	else
		"$TM_BUNDLE_SUPPORT"/bin/askRhelperDaemon.sh "@getHelpURL('$WORD')"
		FILE=$(cat "$RhelperAnswer")
		if [ ! -z "$FILE" -a "$FILE" != "NA" ]; then
			if [ "${FILE:0:1}" = "/" ]; then
				RES=$(cat "$FILE")
			else
				RES=$(curl -gsS "$FILE")
			fi
			echo -en "$RES" | perl -e 'undef($/);$w=$ENV{"WORD"};$a=&lt;&gt;;$a=~m!.*?&lt;h\d&gt;Usage&lt;/h\d&gt;\s*&lt;pre&gt;.*?($w\(.*?\)).*?&lt;/pre&gt;.*!s;print $1'
		else
			exit 200
		fi
		"$TM_BUNDLE_SUPPORT"/bin/askRhelperDaemon.sh "@getPackageFor('$WORD')"
		LIB=$(cat "$RhelperAnswer")
		TASK="@|sink('$RDRAMDISK/r_tmp')"
		echo "$TASK" &gt; "$RDHOME"/r_in
		TASK="@|cat(sum((.packages()) %in% \"$LIB\"),sep='')"
		echo "$TASK" &gt; "$RDHOME"/r_in
		TASK="@|sink(file=NULL)"
		echo "$TASK" &gt; "$RDHOME"/r_in
		while [ 1 ]
		do
			RES=$(tail -c 2 "$RDRAMDISK"/r_out)
			[[ "$RES" == "&gt; " ]] &amp;&amp; break
			[[ "$RES" == ": " ]] &amp;&amp; break
			[[ "$RES" == "+ " ]] &amp;&amp; break
			sleep 0.02
		done
		RES=$(cat "$RDRAMDISK"/r_tmp)
		if [ ! -z "$RES" -a "$RES" == "1" ]; then
			echo -en "\n•• library: $LIB"
		else
			echo -en "\n• Library “${LIB}” not yet loaded! [press CTRL+SHIFT+L]"
		fi
		exit 206
	fi
fi

# R script
"$TM_BUNDLE_SUPPORT"/bin/askRhelperDaemon.sh "@getHelpURL('$WORD')"
FILE=$(cat "$RhelperAnswer")
if [ ! -z "$FILE" -a "$FILE" != "NA" ]; then
	if [ "${FILE:0:1}" = "/" ]; then
		RES=$(cat "$FILE")
	else
		RES=$(curl -gsS "$FILE")
	fi
	"$TM_BUNDLE_SUPPORT"/bin/askRhelperDaemon.sh "@getPackageFor('$WORD')"
	LIB=$(cat "$RhelperAnswer")
	RES=$(echo -en "$RES" | perl -e 'undef($/);$w=$ENV{"WORD"};$a=&lt;&gt;;$a=~m!.*?&lt;h\d&gt;Usage&lt;/h\d&gt;\s*&lt;pre&gt;.*?($w\(.*?\)).*?&lt;/pre&gt;.*!s;print $1')
	if [ ! -z "$RES" ]; then
		echo -n "$RES"
		echo -en "\n•• library: $LIB"
		exit 206
	fi
else
	# Parse R script for functions
	OUT=$(echo -en "$TEXT" | "$TM_BUNDLE_SUPPORT/bin/parseDocForFunctions.sh" "$WORD")
	
	LIB="local"

	[[ -z "$OUT" ]] &amp;&amp; exit 200

	OUT=$WORD$OUT
	echo -n "$OUT"
	echo -en "\n•• library: $LIB"
	exit 206
fi
</string>
	<key>fallbackInput</key>
	<string>none</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>~H</string>
	<key>name</key>
	<string>Show Function Usage</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>scope</key>
	<string>source.r, source.rd.console</string>
	<key>uuid</key>
	<string>797A6B84-49BB-4BBD-8F51-9A225433CA9C</string>
</dict>
</plist>
