<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleUUID</key>
	<string>B5A22967-2E6A-4B66-9C71-DA8762C01E27</string>
	<key>commands</key>
	<array>
		<dict>
			<key>argument</key>
			<dict>
				<key>beforeRunningCommand</key>
				<string>nop</string>
				<key>command</key>
				<string>[[ -n "$TM_SELECTED_TEXT" ]] &amp;&amp; open "txmt://open/?line=$TM_INPUT_START_LINE&amp;column=$TM_INPUT_START_LINE_INDEX"</string>
				<key>fallbackInput</key>
				<string>none</string>
				<key>input</key>
				<string>selection</string>
				<key>keyEquivalent</key>
				<string>^~1</string>
				<key>name</key>
				<string>unselect</string>
				<key>output</key>
				<string>showAsTooltip</string>
				<key>uuid</key>
				<string>A97EDCBC-C3C4-43DC-A8F4-1852564EE6DA</string>
			</dict>
			<key>command</key>
			<string>executeCommandWithOptions:</string>
		</dict>
		<dict>
			<key>argument</key>
			<dict>
				<key>action</key>
				<string>findNext</string>
				<key>findInProjectIgnoreCase</key>
				<true/>
				<key>findInProjectRegularExpression</key>
				<false/>
				<key>findString</key>
				<string>\xFFF3</string>
				<key>ignoreCase</key>
				<false/>
				<key>regularExpression</key>
				<false/>
				<key>replaceAllScope</key>
				<string>document</string>
				<key>replaceString</key>
				<string>$1</string>
				<key>wrapAround</key>
				<true/>
			</dict>
			<key>command</key>
			<string>findWithOptions:</string>
		</dict>
		<dict>
			<key>argument</key>
			<dict>
				<key>beforeRunningCommand</key>
				<string>nop</string>
				<key>command</key>
				<string>export RES=$(perl -e '
#!/usr/bin/perl -X
no warnings;
undef $/;

$utf8a = q{
	 	[\x00-\x7F]
	|	[\xC2-\xDF][\x80-\xBF]
	|	\xE0[\xA0-\xBF][\x80-\xBF]
	|	[\xE1-\xEF][\x80-\xBF][\x80-\xBF]
	|	\xF0[\x90-\xBF][\x80-\xBF][\x80-\xBF]
	|	[\xF1-\xF7][\x80-\xBF][\x80-\xBF][\x80-\xBF]
	|	\xF8[\x88-\xBF][\x80-\xBF][\x80-\xBF][\x80-\xBF]
	|	[\xF9-\xFB][\x88-\xBF][\x88-\xBF][\x88-\xBF][\x88-\xBF]
	|	\xFC[\x84-\xBF][\x88-\xBF][\x88-\xBF][\x88-\xBF][\x88-\xBF]
	|	\xFD[\x88-\xBF][\x88-\xBF][\x88-\xBF][\x88-\xBF][\x88-\xBF]
	     };

$org = &lt;&gt;;
$line = $ENV{"TM_LINE_NUMBER"}-1;
$line_index = $ENV{"TM_LINE_INDEX"}+0;

#search left from caret backwards in blocks
$count = $line;
$pos = 0;
while($count--){
	$pos = index($org,"\n",$pos);
	$pos++;
}
$pos += $line_index;
$text = substr($org,0,$pos);

#perl crashes with that regexp on large documents
#$org =~ m/((.*\n){$line})(.{$line_index})/;
#$text = "$1$3";

$curindex = length($text);

if($ENV{"TM_MODE"} =~ /HTML|Property List/ ) {
	$text =~ s!&lt;(/?(area|base|basefont|br|col|frame|hr|img|input|isindex|link|meta|param).*?/?)&gt;!repl1($&amp;)!eisg;
}
$text=~s/&lt;(\/){0}[^&gt;]*?\/&gt;/repl1($&amp;)/esg;

#first loop fast search near caret
$first = 2;
$pos = $curindex-6000;
while($first--){
	$first++;
	$pos = 0 if ($pos&lt;0);
	pos($text) = $pos;
	while($text =~ m/&lt;(\/)?(\w[\w:-]*)[^&gt;]*&gt;/sog){
		if (!defined($1)) {
			unshift(@stack, [$2,(pos($text))]);
		} else {
			while(@stack) { last if (shift(@stack)-&gt;[0] eq $2) };
		}
	}
	$start = shift(@stack);
	last if (defined($start-&gt;[0]) || $pos == 0);
	$pos = 0;
}

#calculate $column for setting the caret
$offset = rindex substr($text,0,$start-&gt;[1]), "\n";
$offtext = substr($text, $offset+1, $start-&gt;[1]-$offset);
@len = $offtext =~ /$utf8a/gox;
$column = $#len+1;

#search right from caret
@stack = ();
$text = substr($org,$curindex,length($org)-$curindex);
if($ENV{"TM_MODE"} =~ /HTML|Property List/ ) {
	$text =~ s!&lt;(/?(area|base|basefont|br|col|frame|hr|img|input|isindex|link|meta|param).*?/?)&gt;!repl1($&amp;)!eisg;
}
$text=~s/&lt;(\/){0}[^&gt;]*?\/&gt;/repl1($&amp;)/esg;
while($text =~ m/&lt;(\/)?(\w[\w:-]*)[^&gt;]*&gt;/sog){
	if (!defined($1)) {
		unshift(@stack, [$2,(pos($text)-length($&amp;))]);
	} else {
		if (!@stack) {
			$end = [$2,(pos($text)-length($&amp;))];
			last if ($end-&gt;[0] eq $start-&gt;[0]);
		} else {
			while(@stack) { last if (shift(@stack)-&gt;[0] eq $2) };
		}
	}
}

#set caret
if(!length($start-&gt;[0])){
	system("osascript -e beep &amp;&gt;/dev/null &amp;");
	exit;
}
if($start-&gt;[0] ne $end-&gt;[0]){
	system("osascript -e beep &amp;&gt;/dev/null &amp;");
}
@cnl = substr($org,$start-&gt;[1],$curindex-$start-&gt;[1]) =~ m/(\n)/g;
$start_line = $line - $#cnl;
system("open \"txmt://open/?line=$start_line&amp;column=$column\"");
print substr($org,$start-&gt;[1],$end-&gt;[1]+$curindex-$start-&gt;[1]);

sub repl1{ $_ = shift(); s/[^\t\n]/ /sg; return $_; }
')

/bin/bash -c 'export __CF_USER_TEXT_ENCODING=0x1F5:0x8000100:0x8000100;echo -n "$RES" | pbcopy -pboard find'

</string>
				<key>input</key>
				<string>document</string>
				<key>keyEquivalent</key>
				<string>^1</string>
				<key>name</key>
				<string>start</string>
				<key>output</key>
				<string>showAsTooltip</string>
				<key>uuid</key>
				<string>44875D0C-086B-4B25-9F6F-79B9BAA1C03A</string>
			</dict>
			<key>command</key>
			<string>executeCommandWithOptions:</string>
		</dict>
		<dict>
			<key>command</key>
			<string>findNext:</string>
		</dict>
	</array>
	<key>keyEquivalent</key>
	<string>~@B</string>
	<key>name</key>
	<string>Select Balanced HTML/XML Tag Contents</string>
	<key>scope</key>
	<string>text.html -(comment.block.html) -(text.html source), text.xml -(comment.block.xml) -(text.xml source)</string>
	<key>uuid</key>
	<string>154ED053-9760-4249-B159-E7A8D7482AE5</string>
</dict>
</plist>
